@page "/alldiscs"

@rendermode InteractiveServer
@using Microsoft.JSInterop
@using System.Text.Json

@inject DialogService DialogService
@inject IJSRuntime JSRuntime

@inject DiscServiceClient discService
@inject NavigationManager navigationManager

<PageTitle>All Discs</PageTitle>

<RadzenDataGrid  RowClick="@((args)=>SelectDisc(args))" FilterPopupRenderMode="PopupRenderMode.OnDemand" RowSelect="@RowSelect" @bind-Value="@selectedDisc" TItem="Disc" AllowFiltering="true" AllowColumnResize="true" Data="@discs" ColumnWidth="300px" PageSize="2">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Disc.Name)" Title="Name" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(Disc.DiscType)" Title="Disc Type" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(Disc.Speed)" Title="Speed" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(Disc.Glide)" Title="Glide" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(Disc.Turn)" Title="Turn" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(Disc.Fade)" Title="Fade" Width="100px" />
        <RadzenDataGridColumn TItem="Disc" Context="disc">
            <Template>
                <RadzenButton Icon="delete" Size="ButtonSize.Small" Click="@(args => DeleteDisc(disc.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<div class="rz-p-4">@selectedInDiscBag</div>


@code {
    private List<Disc>? discs;
    private IList<Disc> selectedDisc;

    private Disc selectedInDiscBag;

    protected override async Task OnInitializedAsync()
    {
        discs = await discService.GetAllDiscs();
        //selectedDisc = discs.Take(1).ToList();

    }

    void RowSelect()
    {
        
    }


    private async void DeleteDisc(int id)
    {
        await discService.DeleteDiscById(id);
        discs = await discService.GetAllDiscs();

    }

    //private void EditDisc(int id)
    //{

    //    navigationManager.NavigateTo($"/add/{id}");
    //    //await discService.UpdateDisc(disc);
    //    //discs = await discService.GetAllDiscs();

    //}

    private void SortDiscs()
    {
        if (discs != null)
        {
            discService.SortDiscs(discs);
            StateHasChanged();
        }

    }

    DialogSettings _settings;
    public DialogSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private void OnRowSelect(Disc disc)
    {

    }


    public async Task SelectDisc(DataGridRowMouseEventArgs<Disc> args)
    {
        Disc disc = args.Data;

        //selectedInDiscBag = disc;

        //await LoadStateAsync();

        await DialogService.OpenAsync<EditDisc>("title",
               new Dictionary<string, object>() { { "NewDisc", disc } },
               new DialogOptions()
               {
                   Resizable = true,
                   Draggable = true,
                   Resize = OnResize,
                   Drag = OnDrag,
                   Width = Settings != null ? Settings.Width : "700px",
                   Height = Settings != null ? Settings.Height : "512px",
                   Left = Settings != null ? Settings.Left : null,
                   Top = Settings != null ? Settings.Top : null,

               });
        

        //selectedDisc = null;


        //DialogService.OnClose += OnDialogClose;

        //await SaveStateAsync();
    }

    void OnDialogClose(dynamic result)
    {
        selectedDisc = null;
    }



    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }

    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }


    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "DialogSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DialogSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "DialogSettings", JsonSerializer.Serialize<DialogSettings>(Settings));
    }

    public class DialogSettings
    {
        public string Left { get; set; }
        public string Top { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
    }


}
